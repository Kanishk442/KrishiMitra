from flask import Flask, request, jsonify, render_template
import requests
import mysql.connector
from tabulate import tabulate

app = Flask(__name__)

# Your existing functions (get_db_connection, get_coordinates, etc.) go here
# ... [Keep all your existing functions exactly as they are] ...

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_crops', methods=['POST'])
def get_crops():
    district = request.json['district']
    
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)
    
    # Get District ID
    cursor.execute("""
        SELECT d.District_ID FROM districts d
        WHERE d.District_Name = %s
    """, (district,))
    district_data = cursor.fetchone()
    
    if not district_data:
        return jsonify({"error": "District not found"}), 404
    
    # Get Crops
    cursor.execute("""
        SELECT DISTINCT c.Name 
        FROM crop c
        WHERE c.District_ID = %s OR c.District_ID IS NULL
        ORDER BY c.Name
    """, (district_data['District_ID'],))
    
    crops = [row['Name'] for row in cursor.fetchall()]
    cursor.close()
    db.close()
    
    return jsonify({"crops": crops})

@app.route('/generate_plan', methods=['POST'])
def generate_plan_api():
    data = request.json
    district = data['district']
    crop = data['crop']
    mode = data['mode']  # 'manual' or 'weather'
    
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)
    
    # Get District Info
    cursor.execute("""
        SELECT d.District_ID, s.State_Name 
        FROM districts d
        JOIN states s ON d.State_ID = s.State_ID
        WHERE d.District_Name = %s
    """, (district,))
    district_data = cursor.fetchone()
    
    if not district_data:
        return jsonify({"error": "District not found"}), 404
    
    # Get Agro Data
    cursor.execute("""
        SELECT 
            s.Soil_Type, s.Nutrient_Level,
            c.Yield_Estimate, cir.Irrigation_Requirement,
            cd.Name AS crop_disease, cd.Treatment
        FROM crop c
        JOIN soil s ON c.Soil_ID = s.Soil_ID
        LEFT JOIN crop_irrigation_requirements cir ON c.Crop_ID = cir.Crop_ID
        LEFT JOIN crop_disease cd ON c.Crop_ID = cd.Crop_ID
        WHERE c.Name = %s AND (c.District_ID = %s OR c.District_ID IS NULL)
        LIMIT 1
    """, (crop, district_data['District_ID']))
    
    agro_data = cursor.fetchone()
    cursor.close()
    
    if not agro_data:
        return jsonify({"error": "No data for this crop in district"}), 404
    
    if mode == "weather":
        # Real-time weather mode
        coords = get_coordinates(district)
        weather_data = get_weather_forecast(coords['Latitude'], coords['Longitude'])
        
        if not weather_data:
            return jsonify({"error": "Weather API failed"}), 500
            
        plan = generate_plan(agro_data, weather_data)
        return jsonify({
            "type": "weather",
            "plan": plan,
            "location": f"{district}, {district_data['State_Name']}",
            "crop": crop
        })
    else:
        # Manual advisory mode
        return jsonify({
            "type": "manual",
            "soil_type": agro_data['Soil_Type'],
            "irrigation_req": agro_data.get('Irrigation_Requirement', 'Moderate'),
            "location": f"{district}, {district_data['State_Name']}",
            "crop": crop
        })

if __name__ == '__main__':
    app.run(debug=True)